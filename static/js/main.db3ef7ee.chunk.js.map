{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Card","data","onClick","className","alt","src","Endergebnis","win","lose","tryAgain","type","Cardchosed","App","props","state","card","enemy","chosenCard","won","lost","result","i","cardArray","this","id","Math","floor","random","fetch","then","response","json","sprites","front_default","name","stats","base_stat","setState","choose","setTimeout","enemyCard","buildCard","powerYou","parseInt","powerEnemy","handleClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db3ef7ee.chunk.js","sourcesContent":["import React from 'react';\n\n// Kartenkomponente\nconst Card = ({data, onClick}) => {\n    return(\n      <div className='bg-light-green mid-gray ba br4 grow pa2 ma2' onClick={onClick}>\n        <img alt=\"pokemon\" src={data[0]} />\n        <h2 className='f5'>{data[1]}</h2>\n        <p>HP: {data[2]}</p>\n        <p>Attack: {data[3]}</p>\n        <p>Defense: {data[4]}</p>\n      </div>\n    );\n};\n\n// Endergebnis 10lost -> Game Over\n// 10Win -> Winner\nconst Endergebnis = ({win, lose, tryAgain}) => {\n  if(win >= 10 && lose <= 10){\n    return(\n      <div>\n       <h1>Winner!</h1>\n       <button className='silver bg-dark-gray pa2 ma3 br3' type=\"button\" onClick={tryAgain}>Again?</button>\n      </div>\n    );\n  }\n  else if(lose >= 10 && win <= 10)\n  {\n    return(\n      <div>\n        <h1>Game over!</h1>\n        <button className='silver bg-dark-gray pa2 ma3 br3' type=\"button\" onClick={tryAgain}>Again?</button>\n      </div>\n    );\n  }\n  else{ return (\n    <div>\n    <button className='silver bg-dark-gray pa2 ma3 br3' type=\"button\" onClick={tryAgain}>Restart</button>\n    </div>\n  );}\n}\n\n// gewählte Karte\nconst Cardchosed = ({data}) => {\n    if(data === 0){\n      return(<div className='bg-moon-gray h3 br3 w2 bg pa2 ma2'></div>);\n    }else {\n      return(\n       <div className='bg-lightest-blue mid-gray ba br3 grow pa2 ma2'>\n         <img alt=\"pokemon\" src={data[0]} />\n         <h2 className='f5'>{data[1]}</h2>\n         <p>HP: {data[2]}</p>\n         <p>Attack: {data[3]}</p>\n         <p>Defense: {data[4]}</p>\n       </div>\n     );\n    }\n};\n\n// Spiel\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      card: [1,2,3,4,5,6],\n      enemy: 0,\n      chosenCard: 0,\n      won: 0,\n      lost: 0,\n      result: ''\n    };\n  }\n\n  // Hier werden zufällige Karten aus der Pokemon API geladen\n  buildCard(i){\n    const cardArray = this.state.card;\n    const id = Math.floor((Math.random()*800)+1);\n    // fetched Daten aus der Pokemon API\n    fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n      .then(response => response.json())\n      .then(data => {\n        cardArray[i] = [\n          data.sprites.front_default,\n          data.name,\n          data.stats[0].base_stat,\n          data.stats[1].base_stat,\n          data.stats[2].base_stat,\n        ];\n        // Einfügen des Datenarrays in card\n        this.setState({card: cardArray});\n          });\n  }\n\n  enemyCard(){\n    let cardArray = this.state.enemy;\n    const id = Math.floor((Math.random()*800)+1);\n    // fetched Daten aus der Pokemon API\n    fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n      .then(response => response.json())\n      .then(data => {\n        cardArray = [\n          data.sprites.front_default,\n          data.name,\n          data.stats[0].base_stat,\n          data.stats[1].base_stat,\n          data.stats[2].base_stat,\n        ];\n        // Einfügen des Datenarrays in card\n        this.setState({enemy: cardArray});\n          });\n  }\n\n  handleClick(i){\n    const choose = this.state.card[i];\n    this.setState({chosenCard: choose});\n    setTimeout(()=> {this.enemyCard();},100);\n    setTimeout(()=> {\n      this.buildCard(i);\n      // Attack/HP_Enemy*Defense_Enemy\n      const powerYou = parseInt(choose[3])/(parseInt(this.state.enemy[3])*parseInt(this.state.enemy[4]));\n      const powerEnemy = parseInt(this.state.enemy[2])/(parseInt(choose[2])*parseInt(choose[4]));\n      // Bei Gewinn/ Verlust eine Ausgabe und dazu den Zählerhochzählen\n      if(powerYou > powerEnemy){\n        this.setState({\n          result: 'You win',\n          won: this.state.won+1\n        });\n      }\n      else if(powerEnemy > powerYou){\n        this.setState({\n          result: 'You lose',\n          lost: this.state.lost+1\n        });\n      }\n      else{\n        this.setState({result: 'Tie'});\n      }\n      // Wenn man 10mal gewonnen hat -> gewonnen\n      // Ansonsten Game Over\n    },1000);\n    setTimeout(()=>{\n      this.setState({result: ''});\n    },100);\n  }\n\n  tryAgain(){\n    for(let i= 0; i<5; i++){\n      this.buildCard(i);\n    }\n    this.setState({\n      enemy: 0,\n      chosenCard: 0,\n      won: 0,\n      lost: 0\n    });\n  }\n\n  // Wenn die App gemountetd ist, werden die Karten zufällig verteilt\n  componentWillMount(){\n    for(let i= 0; i<5; i++){\n      this.buildCard(i);\n    }\n  }\n\n  render(){\n    const {card, chosenCard, enemy, won, lost, result } = this.state;\n    return (\n      <div className='w-100 mid-gray tc bg-washed-yellow'>\n        <header className='pa1'>\n          <h1 className='f1'>Pokemon Cards</h1>\n        </header>\n        <section className='w-100'>\n          <h1>Enemy</h1>\n          <div className='flex flex-row flex-wrap justify-center'>\n            <div className='bg-light-red h3 w2 bg br3 pa2 ma2'></div>\n            <div className='bg-light-red h3 w2 bg br3 pa2 ma2'></div>\n            <div className='bg-light-red h3 w2 bg br3 pa2 ma2'></div>\n            <div className='bg-light-red h3 w2 bg br3 pa2 ma2'></div>\n            <div className='bg-light-red h3 w2 bg br3 pa2 ma2'></div>\n          </div>\n        </section>\n        <hr />\n        <section className='flex flex-row justify-center items-center'>\n          <Endergebnis win={won} lose={lost} tryAgain={()=>this.tryAgain()}/>\n          <Cardchosed data={enemy} />\n          <Cardchosed data={chosenCard} />\n          <h1>{result}</h1>\n        </section>\n        <hr />\n        <section className='w-100'>\n          <h1>Me</h1>\n          <div className='flex flex-row flex-wrap justify-center'>\n            <div>\n              <h2>Lost: {lost}</h2>\n              <h2>Won: {won}</h2>\n            </div>\n            <Card data={card[0]} onClick={()=>this.handleClick(0)} />\n            <Card data={card[1]} onClick={()=>this.handleClick(1)} />\n            <Card data={card[2]} onClick={()=>this.handleClick(2)} />\n            <Card data={card[3]} onClick={()=>this.handleClick(3)} />\n            <Card data={card[4]} onClick={()=>this.handleClick(4)} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}